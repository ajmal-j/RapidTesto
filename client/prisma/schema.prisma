datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  missedLetters MissedLetters[]
  completed Completed[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])

  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])

  @@map("verification_token")
}
 

model MissedLetters {
  id        String   @id @default(cuid())
  letters   String[] @default([])

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("missed_letters")
}


model Completed {
  id        String   @id @default(cuid())
  userId  String
  wordId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  words String
  typedWords String
  result Results[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time Int
  @@map("completed_chapters")
}


model Results {
  id String @id @default(uuid())
  completedId String
  completed Completed @relation(fields: [completedId], references: [id], onDelete: Cascade)
  accuracy Int
  speed String
  typed Int 
  missed Int

  @@map("results")
}